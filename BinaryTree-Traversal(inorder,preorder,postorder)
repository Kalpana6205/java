#INORDER
import java.util.*;
class Node {
    int data;
    Node left, right;

    Node(int n) {
        data = n;
        left = right = null;
    }
}

public class Main {  
    public static void printInorder(Node node) {
        if (node == null)
            return;

        printInorder(node.left);
        System.out.print(node.data + " ");
        printInorder(node.right);
    }

    public static void main(String[] args) {
        Node root = new Node(1);
        root.left = new Node(2);
        root.right = new Node(3);
        root.left.left = new Node(4);
        root.left.right = new Node(5);
        root.right.right = new Node(6);

        printInorder(root);
    }
}

#PREORDER
import java.util.*;
class Node {
    int data;
    Node left, right;

    Node(int n) {
        data = n;
        left = right = null;
    }
}

public class Preorder {  
    Node root;
    public static void printInorder(Node node) {
        if (node == null)
            return;
        System.out.print(node.data + " ");
        printInorder(node.left);
        printInorder(node.right);
    }

    public static void main(String[] args) {
        Preorder tree=new Preorder();
        
        tree.root = new Node(1);
        tree.root.left = new Node(2);
        tree.root.right = new Node(3);
        tree.root.left.left = new Node(4);
        tree.root.left.right = new Node(5);
        tree.root.right.right = new Node(6);

        printInorder(tree.root);
    }
}

#POSTORDER
import java.util.*;
class Node {
    int data;
    Node left, right;

    Node(int n) {
        data = n;
        left = right = null;
    }
}

public class Preorder {  
    Node root;
    public static void printInorder(Node node) {
        if (node == null)
            return;
        printInorder(node.left);
        printInorder(node.right);
        System.out.print(node.data + " ");
    }

    public static void main(String[] args) {
        Preorder tree=new Preorder();
        
        tree.root = new Node(1);
        tree.root.left = new Node(2);
        tree.root.right = new Node(3);
        tree.root.left.left = new Node(4);
        tree.root.left.right = new Node(5);
        tree.root.right.right = new Node(6);

        printInorder(tree.root);
    }
}
