#INSERTION
class Node{
    int data;
    Node next;
    Node prev;
    Node(int data){
        this.data=data;
        this.next=null;
        this.prev=null;
    }
}
class DLL{
    Node node;
    Node head;
    Node tail;
    int size=0;
public void insertAtfirst(int data){
    Node newnode=new Node(data);
    if(head==null){
        head=tail=newnode;
    }else{
        newnode.next=head;
        head.prev=newnode;
        head=newnode;
    }
    size++;
}    
public void insertAtend(int data){
    Node newnode=new Node(data);
    if(head==null){
        insertAtfirst(data);
        return;
    }else{
        tail.next=newnode;
        newnode.prev=tail;
        tail=newnode;
    }
    size++;
}
public void insertAtspecific(int data,int pos){
    Node newnode=new Node(data);
    if(pos==0){
        insertAtfirst(data);
    }else if (pos==size){
        insertAtend(data);
    }else{
        Node temp=head;
        for(int i=1;i<pos;i++){
        temp=temp.next;
        }
        newnode.next=temp.next;
        newnode.prev=temp;
        temp.next.prev=newnode;
        temp.next=newnode;
    }
        size++;  
    }
public void display(){
    Node temp=head;
    while(temp!=null){
        System.out.print(temp.data+ " ->");
        temp=temp.next;
    }
    System.out.println("null");
}    
}
class Main{
    public static void main(String[]args){
    DLL link = new DLL();
    link.insertAtfirst(10);
    link.insertAtfirst(20);
    link.insertAtfirst(30);
    link.insertAtfirst(40);
    link.insertAtend(30);
    link.insertAtspecific(40,2);
    link.display();

}
}

#INSERTION AND #DELETION

class Node{
    int data;
    Node next;
    Node prev;
    Node(int data){
        this.data=data;
        this.next=null;
        this.prev=null;
    }
}
class DLL{
    Node node;
    Node head;
    Node tail;
    int size=0;
public void insertAtfirst(int data){
    Node newnode=new Node(data);
    if(head==null){
        head=tail=newnode;
    }else{
        newnode.next=head;
        head.prev=newnode;
        head=newnode;
    }
    size++;
}    
public void insertAtend(int data){
    Node newnode=new Node(data);
    if(head==null){
        insertAtfirst(data);
        return;
    }else{
        tail.next=newnode;
        newnode.prev=tail;
        tail=newnode;
    }
    size++;
}
public void insertAtspecific(int data,int pos){
    Node newnode=new Node(data);
    if(pos==0){
        insertAtfirst(data);
    }else if (pos==size){
        insertAtend(data);
    }else{
        Node temp=head;
        for(int i=1;i<pos;i++){
        temp=temp.next;
        }
        newnode.next=temp.next;
        newnode.prev=temp;
        temp.next.prev=newnode;
        temp.next=newnode;
    }
        size++;  
    }
public void deletAtFist(){
        if(head==null) return;
        else if(head==tail) head=tail=null;
        else{
            head=head.next;
            head.prev=null;
        }
        size--;
    }
public void deletAtEnd(){
        if(head==null) deletAtFist();
        else if(head==tail) head=tail=null;
        else{
            tail=tail.prev;
            tail.next=null;
        }
        size--;
    }
public void deletAtSpe(int pos){
        if(pos==0) deletAtFist();
        else if(pos==size) deletAtEnd();
        else{
            Node temp=head;
            for(int i=1;i<pos;i++){
                temp=temp.next;
            }
            temp.next=temp.next.next;
            temp.next.next.prev=temp;
        }
    }
    
        
public void display(){
    Node temp=head;
    while(temp!=null){
        System.out.print(temp.data+ " ->");
        temp=temp.next;
    }
    System.out.println("null");
}    
}
class Main{
    public static void main(String[]args){
    DLL link = new DLL();
    link.insertAtfirst(10);
    link.insertAtfirst(20);
    link.insertAtfirst(30);
    link.insertAtfirst(40);
    link.insertAtend(30);
    link.insertAtspecific(40,2);
    link.display();
    link.deletAtFist();
    link.deletAtSpe(1);
    link.deletAtEnd();
    link.display();
}
}
