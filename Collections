1)SORTING STRINGS ALPHABETICALLY
import java.util.*;
class Main{
    public static void main(String[]args){
        ArrayList<String> n=new ArrayList<>();
        
        n.add("orange");
        n.add("apple");
        n.add("grapes");
        n.add("banana");
        System.out.println(n);
        Collections.sort(n);
        System.out.println("sorted list"+ n);
    }
}

2)MAXIMUM ELEMENT
import java.util.*;
class Main{
    public static void main(String[]args){
        ArrayList<Integer> num = new ArrayList<>();
        
        num.add(10);
        num.add(20);
        num.add(30);
        num.add(40);
        
        int maxElement=Collections.max(num);
        System.out.println("maximum element is:"+ maxElement);
    }
}

3)REMOVE DUPLICATE ELEMENTS
import java.util.*;
class Main{
    public static void main(String[]args){
        ArrayList<Integer> num = new ArrayList<>();
        
        num.add(10);
        num.add(20);
        num.add(60);
        num.add(40);
        num.add(10);
        num.add(20);
        num.add(30);
        num.add(50);
        
        
        List<Integer>number=new ArrayList<>(new HashSet<>(num));
        System.out.println("array list:"+ number);
    }
}

4)OPERATIONS-ADD ,REMOVE
import java.util.*;
class Main{
    public static void main(String[]args){
        LinkedList<Integer> num = new LinkedList<>();
        
        num.add(10);
        num.add(20);
        num.add(60);
     
        num.remove(Integer.valueOf(20));
        
        for(int i:num){
        System.out.println(i);
    }
}
}

5)INTERSECTION OF TWO ARRAYLISTS
import java.util.*;
class Main{
    public static void main(String[]args){
        ArrayList<Integer> l1 = new ArrayList<>();
        ArrayList<Integer> l2 = new ArrayList<>();
        ArrayList<Integer> intersection = new ArrayList<>();
        //add elements in list 1
        l1.add(10);
        l1.add(20);
        l1.add(60);
       //add elements in list 2
        l2.add(30);
        l2.add(40);
        l2.add(20);
        //finding intersection
        for(int num:l1){
            if(l2.contains(num)){
                intersection.add(num);
            }
        System.out.println("intersection of two arraylist:"+ intersection);
        }
    }
}

6)SHUFFLE THE ELEMENTS IN ARRAYLIST
import java.util.*;
class Main{
    public static void main(String[]args){
        ArrayList<Integer> num = new ArrayList<>();
        num.add(10);
        num.add(20);
        num.add(30);
        num.add(40);
        num.add(50);
        num.add(60);
        System.out.println("original list"+ num);
        Collections.shuffle(num);
        System.out.println("shuffled arraylist:"+ num);
    }
}

7)2ND LARGERST NUMBER
import java.util.*;
class Main{
    public static void main(String[]args){
        ArrayList<Integer> num = new ArrayList<>();
        num.add(10);
        num.add(20);
        num.add(30);
        num.add(40);
        num.add(50);
        num.add(60);

        Collections.sort(num,Collections.reverseOrder());
        if(num.size() > 1){
            System.out.println("second largest element:"+ num.get(1));
        }
        else{
        System.out.println("arraylist doesn't have enough elements.");
        }
    }
}

8)FREQUENCY OF EACH ELEMENT
import java.util.*;

class Main {
    public static void main(String[] args) {
        ArrayList<Integer> num = new ArrayList<>();
        num.add(10);
        num.add(10);
        num.add(20);
        num.add(20);
        num.add(20);
        num.add(30);

        // Using HashMap to store the frequency of each element
        HashMap<Integer, Integer> frequencyMap = new HashMap<>();

        for (int i : num) {
            frequencyMap.put(i, frequencyMap.getOrDefault(i, 0) + 1); // Corrected line
        }

        // Printing the frequency of each element
        for (Integer key : frequencyMap.keySet()) {
            System.out.println("Element: " + key + " | Frequency: " + frequencyMap.get(key));
        }
    }
}

9)KTH SMALLEST ELEMENT
import java.util.*;

class Main {
    public static void main(String[] args) {
        ArrayList<Integer> num = new ArrayList<>();
        num.add(10);
        num.add(60);
        num.add(40);
        num.add(50);
        num.add(20);
        num.add(30);
//specify the kth position
        int k=5;
       //sort array in ascending 
       Collections.sort(num);
       
       if(k <= num.size() && k>0){
           System.out.println(k + "smallest element:" +num.get(k - 1));
       }else{
           System.out.println("invalid value of k");
       }
    }
}

10)MERGE TWO AL IN SINGLE AL
import java.util.*;

class Main {
    public static void main(String[] args) {
        ArrayList<Integer> l1= new ArrayList<>();
        ArrayList<Integer> l2= new ArrayList<>();
        l1.add(10);
        l1.add(60);
        l1.add(40);
        
        l2.add(50);
        l2.add(20);
        l2.add(30);
        
        ArrayList<Integer> mergedList= new ArrayList<>(l1); 
        mergedList.addAll(l2);
        
        System.out.println("merged arraylist:" + mergedList);
    }
}

11)INTERSECTION OF MULTIPLE SETS
import java.util.*;

class Main {
    public static void main(String[] args) {
        Set<Integer> s1= new HashSet<>();
        
        s1.add(10);
        s1.add(60);
        s1.add(20);
        
        Set<Integer> s2= new HashSet<>();
        s2.add(50);
        s2.add(20);
        s2.add(30);
        
        Set<Integer> s3= new HashSet<>();
        s3.add(50);
        s3.add(20);
        s3.add(30);
        
        Set<Integer> intersection= new HashSet<>(s1); 
        intersection.retainAll(s2);
        intersection.retainAll(s3);
        
        System.out.println("intersection of multiple sets:" + intersection);
    }
}

12)CHECK 2 LINKEDLISTS ARE EQUAL OR NOT
import java.util.*;

class Main {
    public static void main(String[] args) {
        LinkedList<Integer> l1= new LinkedList<>();
        
        l1.add(10);
        l1.add(20);
        l1.add(30);
        
        LinkedList<Integer> l2= new LinkedList<>();
        l2.add(10);
        l2.add(60);
        l2.add(30);
        
        if(l1.equals(l2)){
            System.out.println("the two linkedlists are equal.");
        } else {
            System.out.println("the two linkedlists are not equal.");
        }
    }
}

13)CHECK IF HASHSET IS SUBSET OF ANOTHER HASHSET
import java.util.*;

class Main {
    public static void main(String[] args) {
        HashSet<Integer> s1 = new HashSet<>();
        s1.add(10);
        s1.add(20);
        s1.add(30);
        
        HashSet<Integer> s2 = new HashSet<>();
        s2.add(10);
        s2.add(20);
        
        
        if(s1.containsAll(s2)){
            System.out.println("s2 is subset of s1.");
        } else {
            System.out.println("s2 is not a subset of s1.");
        }
    }
}
